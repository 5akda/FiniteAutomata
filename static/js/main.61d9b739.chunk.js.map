{"version":3,"sources":["images/base.png","images/init-3.png","images/trap-123c.png","images/init-1.png","images/init-2.png","images/init-c.png","images/init-empty.png","images/trap-empty.png","App.js","states/stateInit.js","states/stateTrap.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","text","string","nextState","img","base","unclickable","nextbutton","looper","handleEnterClick","bind","handleNextClick","handleRestartClick","handleClearClick","handleAutoplayClick","handleCharClick","this","setState","presentChar","length","charAt","toUpperCase","substring","outputFromState","nextChar","Init_1","Init_2","Init_3","Init_empty","Init_c","stateInit","Trap_123c","Trap_empty","stateTrap","console","log","clearInterval","setInterval","char","className","Navbar","variant","Brand","Nav","Form","inline","Button","InputGroup","FormControl","placeholder","value","onChange","e","target","Append","onClick","disabled","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61d9b739.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/base.404faf26.png\";","module.exports = __webpack_public_path__ + \"static/media/init-3.a12941ba.png\";","module.exports = __webpack_public_path__ + \"static/media/trap-123c.492901d7.png\";","module.exports = __webpack_public_path__ + \"static/media/init-1.57b60d43.png\";","module.exports = __webpack_public_path__ + \"static/media/init-2.8ceb5be3.png\";","module.exports = __webpack_public_path__ + \"static/media/init-c.27f91b28.png\";","module.exports = __webpack_public_path__ + \"static/media/init-empty.039e7f3c.png\";","module.exports = __webpack_public_path__ + \"static/media/trap-empty.cbcfa528.png\";","import React, { Component } from 'react'\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, InputGroup, FormControl, Form, Navbar, Nav } from 'react-bootstrap';\n\nimport { stateInit } from './states/stateInit'\nimport { stateTrap } from './states/stateTrap'\n\nimport base from './images/base.png'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      text: '',\n      string: '',\n      nextState: 'Init',\n      img: base,\n      unclickable: true,\n      nextbutton: 'Start',\n      looper: null\n    }\n    this.handleEnterClick = this.handleEnterClick.bind(this)\n    this.handleNextClick = this.handleNextClick.bind(this)\n    this.handleRestartClick = this.handleRestartClick.bind(this)\n    this.handleClearClick = this.handleClearClick.bind(this)\n    this.handleAutoplayClick = this.handleAutoplayClick.bind(this)\n    this.handleCharClick = this.handleCharClick.bind(this)\n\n  }\n\n  handleEnterClick() {\n    this.handleRestartClick()\n    this.setState({ \n      string: ' '+this.state.text,\n      unclickable: false,\n      nextbutton: 'Start'\n    })\n  }\n\n  handleNextClick() {\n    if(this.state.nextbutton === 'Restart'){\n      this.handleRestartClick()\n    }\n    else{\n      this.setState({ nextbutton: 'Next' })\n\n      var presentChar = null\n\n      if(this.state.string.length > 1) {\n        presentChar = this.state.string.charAt(1).toUpperCase()\n      }\n      else if(this.state.string.length === 1){\n        presentChar = ' '\n      }\n      else if(this.state.string.length === 0) {\n        this.setState({ nextbutton: 'Restart' })\n        return 0\n      }\n\n      this.setState({ string: this.state.string.substring(1) })\n      \n      // State Selector\n      let outputFromState = null\n      switch(this.state.nextState){\n        case 'Init': {\n          outputFromState = stateInit(presentChar)\n          break\n        }\n        case 'Trap': {\n          outputFromState = stateTrap(presentChar)\n          break\n        }\n        default: {\n          console.log('Something went wrong')\n        }\n      }\n      \n      this.setState({\n        img: outputFromState[0],\n        nextState: outputFromState[1]\n      })\n    }\n  }\n\n  handleRestartClick() {\n    this.setState({\n      string: ' '+this.state.text,\n      nextState: 'Init',\n      img: base,\n      nextbutton: 'Start'\n    })\n    clearInterval(this.state.looper)\n  }\n\n  handleClearClick() {\n    this.setState({\n      text: '',\n      string: '',\n      nextState: 'Init',\n      img: base,\n      unclickable: true,\n      nextbutton: 'Start',\n    })\n    clearInterval(this.state.looper)\n  }\n\n  handleAutoplayClick() {\n    this.setState({looper: setInterval(() => this.handleNextClick(),1800)})\n  }\n\n  handleCharClick(char) {\n    this.setState({ text: this.state.text + char })\n  }\n\n  render() {\n    return (\n      <div className=\"Layout-all\">\n\n        <Navbar variant=\"dark\">\n          <Navbar.Brand>Ticket Vendor</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            \n          </Nav>\n          <Form inline className=\"Header\">\n            <Button variant=\"outline-info\">Help</Button>\n            <Button variant=\"outline-info\">About Us</Button>\n          </Form>\n        </Navbar>\n\n        <div className=\"Layout-input\">\n\n          <InputGroup className=\"Input-group\">\n              <FormControl\n                placeholder=\"Enter a String\"\n                value={this.state.text}\n                onChange={ (e)=>this.setState({text: e.target.value}) }\n              />\n              <InputGroup.Append>\n                <Button variant=\"success\" onClick={()=>this.handleEnterClick()}>\n                  &nbsp;ENTER&nbsp;\n                </Button>\n                <Button variant=\"danger\" onClick={()=>this.handleClearClick()}>\n                  &nbsp;CLEAR&nbsp;\n                </Button>\n              </InputGroup.Append>\n          </InputGroup>\n\n          <div className=\"help\">\n            <Button variant=\"outline-primary\" onClick={()=>this.handleCharClick('1')}>\n              1 : Select Station 1\n            </Button>\n            <Button variant=\"outline-primary\" onClick={ ()=>this.handleCharClick('2') }>\n              2 : Select Station 2\n            </Button>\n            <Button variant=\"outline-primary\" onClick={ ()=>this.handleCharClick('3') }>\n              3 : Select Station 3\n            </Button>\n            <Button variant=\"outline-primary\" onClick={ ()=>this.handleCharClick('4') }>\n              4 : Select Station 4\n            </Button>\n            <Button variant=\"outline-primary\" onClick={ ()=>this.handleCharClick('C') }>\n              C : Insert 1 Coin\n            </Button>\n          </div>\n          \n        </div>\n\n        <div className=\"Layout-controller\">\n          <div className=\"Layout-buttonzone\">\n            <Button variant=\"outline-warning\"\n              onClick={ ()=>this.handleNextClick() } \n              disabled={this.state.unclickable}>{this.state.nextbutton}\n            </Button>\n            \n            <Button variant=\"outline-warning\"\n              onClick={ ()=>this.handleAutoplayClick() }\n              disabled={this.state.unclickable}>Autoplay\n            </Button>\n          </div>\n\n          <b className=\"string\">-&gt;{this.state.string}</b>\n\n        </div>\n\n        <div className=\"Layout-body\">\n          <img src={ this.state.img } alt=\"img\"/>\n          <br/>Last Update: 9-Mar-2020 3:30PM\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n//npm start\n//npm run deploy","// Import Images of this State\r\nimport Init_1 from '../images/init-1.png'\r\nimport Init_2 from '../images/init-2.png'\r\nimport Init_3 from '../images/init-3.png'\r\nimport Init_c from '../images/init-c.png'\r\nimport Init_empty from '../images/init-empty.png'\r\n\r\n// Function Returns Image File & Name of Next State\r\nexport function stateInit(nextChar) {\r\n  switch(nextChar) {\r\n    case '1': {\r\n      return [Init_1, 'Station1'] \r\n    }\r\n    case '2': {\r\n      return [Init_2, 'Station2']\r\n    }\r\n    case '3': {\r\n      return [Init_3, 'Station3'] //Wrong\r\n    }\r\n    case '4': {\r\n      return [Init_3, 'Station4']\r\n    }\r\n    case ' ': {\r\n      return [Init_empty, 'Init']\r\n    }\r\n    default: {\r\n      return [Init_c, 'Trap']\r\n    }\r\n  }\r\n}","// Import Images of this State\r\nimport Trap_123c from '../images/trap-123c.png'\r\nimport Trap_empty from '../images/trap-empty.png'\r\n\r\n// Function Returns Image File & Name of Next State\r\nexport function stateTrap(nextChar) {\r\n  switch(nextChar) {\r\n    case '1': case '2': case '3': case '4': case 'C': {\r\n      return [Trap_123c, 'Trap']\r\n    }\r\n    case ' ': {\r\n      return [Trap_empty, 'Trap']\r\n    }\r\n    default: {\r\n      return [Trap_123c, 'Trap']\r\n    }\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}